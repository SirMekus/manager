"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-05-23 13:43:32`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"Indicates what fields are available at the top level of a query operation."
type Query {
    "Find a single user by an identifying attribute."
    user(
      "Search by primary key."
      id: ID @eq @rules(apply: ["prohibits:email", "required_without:email"])

      "Search by email address."
      email: String @eq @rules(apply: ["prohibits:id", "required_without:id", "email"])
    ): User @find

    "List multiple users."
    users(
      "Filters by name. Accepts SQL LIKE wildcards `%` and `_`."
      name: String @where(operator: "like")
    ): [User!]! @paginate(defaultCount: 10)

    tasks(id: Int @eq, status: Int @eq): [Task] @all @inject(context: "user.id", name: "user_id") @orderBy(column:"created_at", direction:"DESC")
}

"Account of a person who utilizes this application."
type User {
    "Unique primary key."
    id: ID!

    "Non-unique name."
    name: String!

    "Unique email address."
    email: String!

    "When the email was verified."
    email_verified_at: DateTime

    "When the account was created."
    created_at: DateTime!

    "When the account was last updated."
    updated_at: DateTime!
}

enum TaskStatus {
  COMPLETED @enum(value: 0)
  IN_PROGRESS @enum(value: 1)
  NOT_STARTED @enum(value: 2)
}

type Task {
  id: ID!
  title: String!
  description: String!
  status: TaskStatus!
  "When the task was created."
  created_at: DateTime!
  due_date: String!
}

type Mutation {
  createTask(title: String!, due_date: String!, description: String!): Task @create @inject(context: "user.id", name: "user_id")

  updateTask(id: Int!, title: String, due_date: String, description: String, status: Int): Task @update @inject(context: "user.id", name: "user_id")

  deleteTask(id: Int! @whereKey): Task @delete @inject(context: "user.id", name: "user_id")
}

